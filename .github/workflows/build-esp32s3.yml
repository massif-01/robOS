name: Build ESP32S3 Firmware

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

env:
  IDF_VERSION: 'v5.2.2'  # ‰ΩøÁî®Êõ¥Á®≥ÂÆöÁöÑESP-IDFÁâàÊú¨
  PROJECT_NAME: 'robOS'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install ESP-IDF
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: ${{ env.IDF_VERSION }}
        target: esp32s3
    
    - name: Cache ESP-IDF and components
      uses: actions/cache@v4
      with:
        path: |
          ~/.espressif
          build/managed_components
        key: ${{ runner.os }}-esp-idf-${{ env.IDF_VERSION }}-${{ hashFiles('**/idf_component.yml', '**/CMakeLists.txt', 'sdkconfig.defaults') }}
        restore-keys: |
          ${{ runner.os }}-esp-idf-${{ env.IDF_VERSION }}-
    
    - name: Setup build environment
      run: |
        echo "Setting up ESP-IDF environment..."
        . $IDF_PATH/export.sh
        echo "ESP-IDF Path: $IDF_PATH"
        echo "Python version: $(python --version)"
        echo "IDF version: $(idf.py --version)"
        
        # Check component dependencies
        echo "Checking component structure..."
        ls -la components/
        
        # Check if all required components exist
        for component in event_manager hardware_hal console_core fan_controller touch_led board_led storage_manager matrix_led ethernet_manager power_monitor gpio_controller usb_mux_controller device_controller hardware_commands agx_monitor web_server; do
          if [ -d "components/$component" ]; then
            echo "‚úÖ $component component found"
          else
            echo "‚ùå $component component missing!"
          fi
        done
        
    - name: Configure project
      run: |
        . $IDF_PATH/export.sh
        echo "Configuring project for ESP32S3..."
        
        # Clean any previous configuration
        rm -f sdkconfig
        
        # Set target
        idf.py set-target esp32s3
        echo "Target set successfully"
        
        # Verify configuration
        echo "Verifying sdkconfig..."
        if [ -f sdkconfig ]; then
          echo "‚úÖ sdkconfig generated successfully"
          grep "CONFIG_IDF_TARGET_ESP32S3=y" sdkconfig && echo "‚úÖ ESP32S3 target confirmed"
        else
          echo "‚ùå sdkconfig not generated!"
          exit 1
        fi
        
    - name: Build firmware
      run: |
        . $IDF_PATH/export.sh
        echo "Starting build..."
        idf.py build
        echo "Build completed successfully"
        
    - name: Verify build outputs
      run: |
        echo "Verifying build outputs..."
        ls -la build/
        echo "Checking for essential files..."
        
        if [ ! -f "build/robOS.bin" ]; then
          echo "‚ùå robOS.bin not found!"
          exit 1
        fi
        
        if [ ! -f "build/bootloader/bootloader.bin" ]; then
          echo "‚ùå bootloader.bin not found!"
          exit 1
        fi
        
        if [ ! -f "build/partition_table/partition-table.bin" ]; then
          echo "‚ùå partition-table.bin not found!"
          exit 1
        fi
        
        echo "‚úÖ All essential files found"
        
    - name: Generate build info
      run: |
        echo "Build Information:" > build_info.txt
        echo "==================" >> build_info.txt
        echo "Project: ${{ env.PROJECT_NAME }}" >> build_info.txt
        echo "Target: ESP32S3" >> build_info.txt
        echo "ESP-IDF Version: ${{ env.IDF_VERSION }}" >> build_info.txt
        echo "Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build_info.txt
        echo "Git Commit: ${{ github.sha }}" >> build_info.txt
        echo "Git Branch: ${{ github.ref_name }}" >> build_info.txt
        echo "Build Number: ${{ github.run_number }}" >> build_info.txt
        echo "" >> build_info.txt
        echo "Flash Command:" >> build_info.txt
        echo "esptool.py --chip esp32s3 --port /dev/ttyUSB0 --baud 460800 write_flash @flash_args" >> build_info.txt
        echo "" >> build_info.txt
        echo "Files in this build:" >> build_info.txt
        echo "===================" >> build_info.txt
        
        # List build files with sizes
        for file in build/*.bin build/*.elf; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            basename_file=$(basename "$file")
            printf "%-25s %10d bytes\n" "$basename_file" "$size" >> build_info.txt
          fi
        done
        
        echo "" >> build_info.txt
        echo "Flash Layout:" >> build_info.txt
        echo "=============" >> build_info.txt
        if [ -f "build/flash_args" ]; then
          cat build/flash_args >> build_info.txt
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32s3-firmware-${{ github.run_number }}
        path: |
          build/*.bin
          build/*.elf
          build/*.map
          build/flash_args
          build/partition_table/partition-table.bin
          build/bootloader/bootloader.bin
          build_info.txt
        retention-days: 30
        
    - name: Upload flashable package
      uses: actions/upload-artifact@v4
      with:
        name: esp32s3-flash-package-${{ github.run_number }}
        path: |
          build/robOS.bin
          build/flash_args
          build/partition_table/partition-table.bin
          build/bootloader/bootloader.bin
          flash_standalone.sh
          FLASH_README.md
          build_info.txt
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: esp32s3-flash-package-${{ github.run_number }}
        path: ./release-files
        
    - name: Create release package
      run: |
        cd release-files
        zip -r ../robOS-esp32s3-${{ github.ref_name }}.zip .
        cd ..
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: robOS ${{ github.ref_name }}
        body: |
          ## robOS ESP32S3 Firmware ${{ github.ref_name }}
          
          ### üöÄ Quick Flash Instructions
          
          1. Download the `robOS-esp32s3-${{ github.ref_name }}.zip` file
          2. Extract the zip file
          3. Connect your ESP32S3 device
          4. Run the flash script:
             ```bash
             chmod +x flash_standalone.sh
             ./flash_standalone.sh
             ```
          
          For detailed instructions, see `FLASH_README.md` in the package.
          
          ### üìÅ Package Contents
          
          - `robOS.bin` - Main application binary
          - `bootloader.bin` - ESP32S3 bootloader
          - `partition-table.bin` - Partition table
          - `flash_args` - Flash arguments for esptool
          - `flash_standalone.sh` - Standalone flash script (no ESP-IDF required)
          - `FLASH_README.md` - Detailed flashing instructions
          - `build_info.txt` - Build information and details
          
          ### üîß Manual Flash Command
          
          If you prefer to flash manually:
          ```bash
          esptool.py --chip esp32s3 --port /dev/ttyUSB0 --baud 460800 write_flash @flash_args
          ```
          
          ### üìä Build Info
          
          - **Target**: ESP32S3
          - **ESP-IDF Version**: ${{ env.IDF_VERSION }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          - **Git Commit**: ${{ github.sha }}
          
        files: |
          robOS-esp32s3-${{ github.ref_name }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}