name: Firmware Quality Check

on:
  workflow_run:
    workflows: ["Build ESP32S3 Firmware"]
    types:
      - completed
  workflow_dispatch:

jobs:
  quality-check:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: esp32s3-firmware-${{ github.event.workflow_run.run_number }}
        path: ./build-output
        
    - name: Install analysis tools
      run: |
        pip install esptool
        
    - name: Analyze firmware
      run: |
        cd build-output
        
        echo "üîç Firmware Analysis Report" > analysis_report.txt
        echo "==========================" >> analysis_report.txt
        echo "" >> analysis_report.txt
        
        # Check if required files exist
        echo "üìÅ File Check:" >> analysis_report.txt
        for file in robOS.bin robOS.elf bootloader.bin partition-table.bin; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
            echo "‚úÖ $file (${size} bytes)" >> analysis_report.txt
          else
            echo "‚ùå $file - MISSING" >> analysis_report.txt
          fi
        done
        echo "" >> analysis_report.txt
        
        # Analyze ELF file if it exists
        if [ -f "robOS.elf" ]; then
          echo "üî¨ ELF Analysis:" >> analysis_report.txt
          file robOS.elf >> analysis_report.txt
          echo "" >> analysis_report.txt
          
          # Check for common symbols (if tools are available)
          if command -v nm &> /dev/null; then
            echo "üìä Symbol Summary:" >> analysis_report.txt
            nm robOS.elf | wc -l | awk '{print "Total symbols: " $1}' >> analysis_report.txt
            echo "" >> analysis_report.txt
          fi
        fi
        
        # Check binary sizes
        if [ -f "robOS.bin" ]; then
          echo "üìè Binary Size Analysis:" >> analysis_report.txt
          size=$(stat -f%z "robOS.bin" 2>/dev/null || stat -c%s "robOS.bin" 2>/dev/null)
          echo "Application binary: ${size} bytes" >> analysis_report.txt
          
          # Size recommendations
          if [ $size -lt 1048576 ]; then  # < 1MB
            echo "‚úÖ Size looks good (< 1MB)" >> analysis_report.txt
          elif [ $size -lt 2097152 ]; then  # < 2MB
            echo "‚ö†Ô∏è  Size is moderate (1-2MB)" >> analysis_report.txt
          else
            echo "‚ö†Ô∏è  Size is large (> 2MB)" >> analysis_report.txt
          fi
          echo "" >> analysis_report.txt
        fi
        
        # Flash configuration check
        if [ -f "flash_args" ]; then
          echo "‚ö° Flash Configuration:" >> analysis_report.txt
          cat flash_args >> analysis_report.txt
          echo "" >> analysis_report.txt
        fi
        
        echo "‚úÖ Analysis complete!" >> analysis_report.txt
        
        # Display report
        cat analysis_report.txt
        
    - name: Upload analysis report
      uses: actions/upload-artifact@v3
      with:
        name: firmware-analysis-${{ github.event.workflow_run.run_number }}
        path: build-output/analysis_report.txt
        retention-days: 30
        
    - name: Comment on PR (if applicable)
      if: github.event.workflow_run.event == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('build-output/analysis_report.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üîç Firmware Quality Check Results\n\n\`\`\`\n${report}\n\`\`\``
          });